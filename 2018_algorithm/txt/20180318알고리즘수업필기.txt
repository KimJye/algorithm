2018.03.19 알고리즘


2장 뒷부분

*stack int search3(int[]a,int value, int start, int end)
 정렬은 배열에서 이진 탐색구현
	탐색 범위: start인덱스에서 end인덱스까지
	탐색 범위의 가운데 위치의 값과 찾을 값을 비교한다.
		찾았으면 찾은 위치 리턴
		못찾았으면, 찾을 값이 가운데 값보다 작으면, 배열의 왼쪽 부분 탐색 재귀호출
						       크면, 배열의 오른쪽 부분 탐색 재귀호출
		
	1)   현재단계에서 작업 구현
		Int middle = (start+end)/2;
		If(a[middle]=value) return middle;

	2)   다음단계 작업 재귀 호출
		 Else if(a[middle] > value) return search3(a, value, start, middle-1);
		Else if(a[middle] < value) return search3(a, value, middle+1, end);

	3)   종료조건
		If(start>end) return -1;

**stack overflow error
stack segment가 부족할 때 발생하는 에러.
stack segment는 고정된 코기임.
함수/메소드가 호출될 떄, 그 메소드 메모리 공간이 stack segment에 할당됨.
이 공간에 지역 변수, 파라미터 변수가 생성됨.
보통 재귀호출에서 종료 조건에 버그가 있을 때, 
재귀호출이 무한이 반복되어 stack overflow error가 발생함.

C/C++언어의 경우에는 너무 큰 배열을 지역 변수로 선언하면 
stack overflow error가 발생할 수 잇음.

자바에서 배열은 new로 만듬. new로 만들면 hip segment에 할당됨.

java:
	int[]a= new int[100000];//hip에 생성 따라서 자바는 stack에 큰게 잘 안만들어짐
c/c++:
	inta[100000];//a 자체가 배열이 됨 따라서 stack에 생성, malloc함수(free반납),new(delete반납)(메모리할당)만 hip segment에 생성됨



3장
	//배열 a의 start 위치부터 끝까지에서 가장 작은 값의 위치(index)를 리턴한다.
	static int findMin(int []a, int start){
		int index=start;
		for(int i= start+1;i<a.length;++i){
			if(a[i]<a[index]){
				index=i;
			}
		   return index;
		}
	
	a ^ 0 == a
	a ^ a == 0
	a ^ a ^ a ==(a ^ a) ^ a == 0 ^ a == a

	*모든 비트가 1이면 -1이다.
	*모든 비트가 0이면 0이다.
	* 111111=-1
	* 111101=-2
	* 111011=-3
	static void swap(int[]a, int i, int j){//a[i==Vi, a[j]==Vj
		a[i] ^= a[j]; // a[i] == Vi ^ Vj, a[j]== Vj
		a[j] ^= a[i]; // a[i] == Vi ^ Vj, a[j]== Vj ^ Vi ^ Vj == Vi
		a[i] ^= a[j]; // a[i] == Vi ^ Vj ^ Vi= Vj,a[j]== Vi

	* swap 할때 temp 없시 해보라.
		int a, b; // Va ,Vb
		a= a ^ b; // a = Va ^ Vb, b= Vb
		b= a ^ b; // a = Va ^ Vb, b= Va ^ Vb ^ Vb= Va
		a= a ^ b; // a = Va ^ Vb ^ Va = Vb, b= Va


