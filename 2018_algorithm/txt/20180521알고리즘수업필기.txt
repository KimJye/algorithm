20180521 알고리즘 수업 필기

*  b-tree
- 데이터 베이스 인덱스 값으로 데이터 저장 대표적인 자료구조
- 가장 중요한 특징 : 디스크 저장 할 때 가장 효율적이다. 노드 크기가 디스크 IO 블럭 크기와 일치한다. 디스크에 저장하기 위한 트리
- binary tree는 디스크에 저장하면 느리다.
- 디스크는 한번 읽고 쓸때 한번의 큰 단위로 사용할 때 이용한다.
- 깊이가 3정도면 100만개 키값이상이 들어간다.

* 자바 멤버 변수는 자동 초기화 
- 숫자는 자동 0 대입
- boolean 자동 fale
- 참조형 변수는 자동 null 대입

* 자바 지역 변수는 자동으로 초기화되는데 이상한 값으로 대입될 수가 있다.

* 해시 테이블
- b-tree다음으로 쓰는 자료구조
- 저장할 값으로 hash값을 계산하고 hash값을 가지고 저장 위치를 계산한다.
- 빨리 찾을 수가 있다.
- 저장할 값이 해쉬값
- value를 인덱스
- 수행 시간 복잡도 O(1)
- 공간 복잡도 O(n)
- 나머지 연산
- 저장할 값이 String이면 Integer로 만들어야한다. Integer 해쉬값을 구하는 로직이 필요하다.
- 충돌 해결 : 그 다음칸에 저장한다.
- 1차 군집 문제 발생 : 충돌이 일어난 지점에 데이터가 모이게 되고 데이터가 모여있으면 충돌이 또 일어날 확률이 높다.

* 저장할 위치 계산 방법
 - Division Method : 저장할 값을 배열의 크기로 나눈 나머지가 그 값을 저장할 위치. 장점: 계산이 간단하다. 단점: 배열의 크기가 소수크기여야 한다.
 - Multiplication Method : 배열의 크기를 보통 2의 배수로 정한다. 장점 : cpu cache hit ratio 측면과 메모리 관리 측면에서 배열의 크기가 2의 배수인 것이 좋다. 단점 : 계산 방법이 복잡하다.

* 충돌을 해결하는 방법
 - Chaining방법 : 저장할 데이터를 링크드 리스트에 등록
 - open Addressing 방법 : 그 다음 칸에 저장을 시도함( - Linear probing , -Quadratic probing, Double hashing)
 - Linear probing
 - Quadratic probing :보폭이 같음
 - Double probing : 충돌이 발생했을때 보폭이 다 다름
 - hash table 크기 고정 : Division Method (실수라서 확장할때 문제가 생김)
 - hash table 크기 확장 : MultiplicationMethod 

* 소수와 서로소
 - 해쉬 테이블의 크기가 소수이어야 하는 이유 : 모든 칸을 찾지 않고 반복된다.

* 해시 테이블의 크기 자동 증가 구현
 - 해시 테이블 크기를 대략 32개부터..?
 - 데이터가 테이블 크기보다 많을때 해시 테이블 크기 자동 증가 구현하는게 바람직하다.
 - 해시 테이블에 저장된 데이터가 어느 정도 수준을 넘으면, 충돌이 자주 발생하여, 
   성능이 급격하게 떨어진다.
 -   

